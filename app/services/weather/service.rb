require 'httparty'

module Weather
  class Service
    include HTTParty
    base_uri 'http://api.weatherapi.com/v1'

    def initialize(api_key = ENV['WEATHER_API_KEY'])
      @api_key = api_key
    end

    def current(location)
      return "–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–∫–∞–∂—ñ—Ç—å –º—ñ—Å—Ç–æ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: '–ø–æ–≥–æ–¥–∞ –ö–∏—ó–≤')" if location.blank?

      response = self.class.get('/current.json', query: {
        key: @api_key,
        q: location,
        lang: 'uk' # —É–∫—Ä–∞—ó–Ω—Å—å–∫–∞ –º–æ–≤–∞
      })

      if response.success?
        data = response.parsed_response
        format_weather(data)
      else
        handle_error(response, location)
      end
    rescue => e
      Rails.logger.error "WeatherAPI Error: #{e.message}"
      "–¢–∏–º—á–∞—Å–æ–≤—ñ –ø—Ä–æ–±–ª–µ–º–∏ –∑ –ø–æ–≥–æ–¥–Ω–∏–º —Å–µ—Ä–≤—ñ—Å–æ–º"
    end

    private

    def format_weather(data)
      location = data['location']
      current = data['current']

      <<~WEATHER
        üåç –ú—ñ—Å—Ç–æ: #{location['name']} (#{location['country']})
        üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: #{current['temp_c']}¬∞C (–≤—ñ–¥—á—É–≤–∞—î—Ç—å—Å—è —è–∫ #{current['feelslike_c']}¬∞C)
        ‚òÅÔ∏è –°—Ç–∞–Ω: #{current['condition']['text']}
        üí® –í—ñ—Ç–µ—Ä: #{current['wind_kph']} –∫–º/–≥–æ–¥ (#{current['wind_dir']})
        üíß –í–æ–ª–æ–≥—ñ—Å—Ç—å: #{current['humidity']}%
        üïí –û–Ω–æ–≤–ª–µ–Ω–æ: #{Time.parse(location['localtime']).strftime('%H:%M %d.%m.%Y')}
      WEATHER
    end

    def handle_error(response, location)
      case response.code
      when 400
        "–ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø–∏—Ç—É –¥–ª—è '#{location}', –≤–≤–µ–¥—ñ—Ç—å –º—ñ—Å—Ç–æ —ñ–Ω —ñ–Ω–≥–ª—ñ—à –ø–ª—ñ–∑ :) (–Ω–µ —è —Ç–∞–∫–∏–π, –∞–ø—ñ —Ç–∞–∫–µ)"
      when 401
        "–ù–µ–≤—ñ—Ä–Ω–∏–π API-–∫–ª—é—á. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ WEATHERAPI_KEY."
      when 403
        "–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ. –ú–æ–∂–ª–∏–≤–æ, –∫–ª—é—á –Ω–µ –∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ."
      when 404
        "–ú—ñ—Å—Ç–æ '#{location}' –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ: 'Kyiv' –∞–±–æ '–ö–∏—ó–≤'"
      else
        "–ü–æ–º–∏–ª–∫–∞ #{response.code}: #{response.body}"
      end
    end
  end
end
weather = Weather::Service.new
puts weather.current("–ö–∏—ó–≤")
# –ê–±–æ –¥–ª—è –∞–Ω–≥–ª–æ–º–æ–≤–Ω–∏—Ö –Ω–∞–∑–≤:
puts weather.current("Lviv")